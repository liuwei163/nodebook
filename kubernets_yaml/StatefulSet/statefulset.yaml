## 1.
# Ddeployment部署的应用我们一般称为无状态应用
# StatefulSet部署的应用我们一般称为有状态应用

# 无状态应用：网络可能会变，存储可能会变，顺序可能会变。场景就是业务代码（Deployment）
# 有状态应用：网络不变，存储不变，顺序不变。场景就是中间件（Mysql，Redis，MQ）

## 2.
# statefulset属于有状态副本集;Deployment等属于无状态的应用部署(stateless)

# - Statefulset 使用场景;对于有如下要求的应用程序，Statefulset 非常适用:
#   稳定、唯一的网络标识(dnsname)【必须配合Service，并且是无头服务】
  #   - Statefulset通过与其相关的无头服务为每个pod提供DNS解析条目。假如无头服务的DNS条目为:
      #     - "$(service name).$(namespace).svc.cluster.local"
      #     - 那么pod的解析条目就是"$(pod name).$(service name).$(namespace).svc.cluster.local"，每个pod name也是唯一的。
#   - 稳定的、持久的存储;【每个Pod始终对应各自的存储路径(PersistantVolumeClaimTemplate】
      #     使用挂载请求，而非挂载路径
      
#   - 有序的、优雅的部署和缩放。【按顺序地增加副本、减少副本，并在减少副本时执行清理】
#   - 有序的、自动的滚动更新。【按顺序自动地执行滚动更新】

# - 限制
#   - 给定吊舱的存储必须由持久量驱动基于所请求的存储类来提供，或者由管理员预先提供。
#   - 删除或者收缩状态集并不会删除它关联的存储卷。这样做是为了保证数据安全，它通常比自动清除状态集所有相关的资源更有价值。
#   - StatefulSet当前需要无头服务来负责Pod的网络标识。你需要负责创建此服务。
#   - 当删除 StatefulSets 时，statefulset 不提供任何终止 Pod 的保证。为了实现 statefulset 中的 Pod 可以有序O地且体面地终止，可以在删除之前将 Statefulset 缩放为 0。
#   - 在默认吊舱管理策略(Ordered Readv)时使用滚动更新，可能进入需要人工干预才能修复的损坏状态



---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: stateful-nginx
  namespace: default
spec:
  podManagementPolicy: OrderedReady # 有序创建，(Parallel ： 无需创建（并发，同时启动）)
  updateStrategy:  # 更新策略
    rollingUpdate: # 有序升级
      partition: 2 # 按分区升级，更新大于等于这个索引的pod
  selector:
    matchLabels:
      app: ss-nginx # has to match .spec.template.metadata.labels
  serviceName: "nginx"  # 服务添加到那个service网络中
  replicas: 3 # by default is 1
  template:   # pod模板
    metadata:
      labels:
        app: ss-nginx # has to match .spec.selector.matchLabels
    spec:
      containers:
      - name: nginx
        image: nginx

--- 
## 加网络
apiVersion: v1
kind: Service
metadata:
  name: nginx   # 和上面的servicename一致
  namespace: default
spec:
  selector:
    app: ss-nginx
  clusterIP: None # 不要分配Clusterip，headless service，整个集群的pod能直接访问。
  # 浏览器目前不能访问，mysql\mq。(要想浏览器访问可以使用ingress网络定义所有的访问逻辑)
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80

## 由于service设置的是无头服务None，所以访问方式为:
    # DNS解析，整个状态kubelet （dns内容同步到pod）和kube-proxy（整个集群网络负责）会同步
    
    # 其他pod可以访问service名称
    # 或者加上statefulset的具体pod名称和service名称，来访问具体的pod
      # curl nginx-svc # 负载均衡到sts部署的pod上
      # curl  mysql-0.nginx-svc # 直接访问知道pod